#!/usr/bin/env node

/**
 * Module dependencies.
 */

var
	fs = require('fs'),
	async = require('async'), 
	program = require('commander'),
	csv = require('csv'),
	kdtree = require('./kdTree'),
	ProgressBar = require('progress');

/**
 * Globals
 */

var 
	arcs = {},
	cities = [],
	citiesTree,
	states = {},
	bar;


program
  .version('0.1.0.alpha1')


program
	.command('arcs')
	.description('Update list of arcs')
	.action(function(){
		loadCities(updateArcs)
	})

program.parse(process.argv);



function loadCities(callback){
	csv()
		.from.path('data/cities.csv', {columns: true})
		.on('record', function(record){
			cities.push({
				id: record.ibge_id,
				state: record.uf,
				name: record.name,
				isCapital: record.capital == '1' ? true : false,
				lat: parseFloat(record.lat),
				lon: parseFloat(record.lon)					
			})
		})
		.on('end', function(){
			citiesTree = new kdTree(cities, distance, ['lon', 'lat']);
			callback();
		})
}

function updateArcs() {

	bar = new ProgressBar('  Finding links [:bar] :percent :etas', {
		complete: '=',
		incomplete: ' ',
		width: 50,
		total: cities.length
	});

	var 
		newArcs = {},
		currentArcs = {};

	console.log('entrou');

	async.each(cities, function(city, callback){
		var nearest = citiesTree.nearest({lon: city.lon, lat: city.lat}, 5);
		async.each(nearest, function(nearest, done){
			if (!currentArcs[city.id]) {

				// new arc, maintain
				newArcs[city.id] = {
					to: nearest[0].id,
					dist: 0,
					route_dist: 0,
					status: 'm', // missing
					updated_at: '2014-03-03'
				}
			} else {

				// if arc existed before, keep it
				newArcs[city.id] = currentArcs[city.id];
			}
			done();
		}, callback)
		
	}, function(){
		console.log(newArcs);
	})
}

function checkLinks(city, nearest, callback) {
	var links = [];
	links = [['id', 'distance', 'to','from','missing']];
	async.eachLimit(nearest, 5, function(near, done){
		links.push([near[0].id, 0, 0,0,2])
		done();
	}, function(){
		csv()
			.from.array(links)
			.to.path('data/links/'+city.id+'.csv')
			.on('end', function(){
				bar.tick();
				callback()
			})
	})
}


function saveLinks(city, links) {

// 	csv()
// 	.from('"1","2","3","4","5"')
// .to('./my.csv', {flags:'r+'})
// // .write(['hello', 'node'])
// .end()
}

function distance(a,b) {
    var lat1 = a.lat,
    lon1 = a.lon,
    lat2 = b.lat,
    lon2 = b.lon;
    var rad = Math.PI/180;

    var dLat = (lat2-lat1)*rad;
    var dLon = (lon2-lon1)*rad;
    var lat1 = lat1*rad;
    var lat2 = lat2*rad;

    var x = Math.sin(dLat/2);
    var y = Math.sin(dLon/2);

    var a = x*x + y*y * Math.cos(lat1) * Math.cos(lat2); 
    return Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
}